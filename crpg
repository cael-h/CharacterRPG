#!/usr/bin/env bash
set -euo pipefail

# crpg — CharacterRPG launcher + interactive chat
# Positional forms (flexible):
#   crpg                      # interactive prompts
#   crpg Olive                # NPC character, player from config
#   crpg Olive Ellis          # NPC + player
#   crpg Olive Ellis @MyStory # NPC + player + story (story suffix with @)
#   crpg @MyStory Olive Ellis # story-first also supported
#   crpg Olive char:Olive     # act as Olive (model won’t speak for Olive)

ROOT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
SERVER_DIR="$ROOT_DIR/server"
BASE="${BASE:-http://localhost:4000}"
CRPG_MAX_TIME="${CRPG_MAX_TIME:-10}"
CRPG_CONNECT_TIMEOUT="${CRPG_CONNECT_TIMEOUT:-2}"
CURL="curl -sS --fail --max-time $CRPG_MAX_TIME --connect-timeout $CRPG_CONNECT_TIMEOUT"
STARTED_BY_CRPG=0
NO_SERVER=0
DIAGNOSE=0
SERVER_RUN="${CRPG_SERVER_CMD:-start}"

json_get() { python3 - "$@" << 'PY'
import sys, json
s=sys.stdin.read().strip()
try: data=json.loads(s if s else '{}')
except Exception: print(''); sys.exit(0)
cur=data
for key in sys.argv[1].split('.'):
    if isinstance(cur, dict): cur=cur.get(key)
    else: cur=None
    if cur is None: break
if cur is None or isinstance(cur,(dict,list)): print('')
else: print(cur)
PY
}

# JSON helpers (stdin): return 0 on condition true
json_is_empty() {
python3 - <<'PY'
import sys, json
try:
    data = json.load(sys.stdin)
    sys.exit(0 if isinstance(data, list) and len(data) == 0 else 1)
except Exception:
    # Treat invalid/missing as empty to trigger import fallback
    sys.exit(0)
PY
}

json_len_gt_zero() {
python3 - <<'PY'
import sys, json
try:
    data = json.load(sys.stdin)
    sys.exit(0 if isinstance(data, list) and len(data) > 0 else 1)
except Exception:
    sys.exit(1)
PY
}

diagnose_local() {
  echo "== Local server config =="
  (
    cd "$SERVER_DIR" && node --import tsx - <<'NODE'
import path from 'path';
import { config } from './src/config.ts';
import { scanDropin } from './src/services/importDebug.ts';

const main = async () => {
  const resolved = Object.fromEntries(
    Object.entries(config.dirs).map(([k, v]) => [k, path.resolve(v as string)])
  );
  const info: Record<string, unknown> = {
    config: { port: config.port, dirs: config.dirs, flags: config.flags },
    resolved,
    dropin: scanDropin(),
  };
  try {
    const { default: Database } = await import('better-sqlite3');
    const db = new Database('rpg.sqlite');
    info.characters = db.prepare('SELECT id, name FROM characters ORDER BY name').all();
    db.close();
  } catch (err) {
    info.charactersError = String(err);
  }
  console.log(JSON.stringify(info, null, 2));
};

main().catch((err) => {
  console.error(JSON.stringify({ error: String(err) }, null, 2));
  process.exit(1);
});
NODE
  ) || echo "(Unable to load local config)"

  if [ "$NO_SERVER" = "1" ]; then
    echo "== HTTP checks skipped (--no-server) =="
    return
  fi

  echo "== HTTP check: $BASE/api/debug/config =="
  if CONFIG_JSON=$($CURL "$BASE/api/debug/config" 2>/dev/null); then
    printf '%s' "$CONFIG_JSON" | python3 -m json.tool 2>/dev/null || printf '%s\n' "$CONFIG_JSON"
  else
    echo "(request failed)"
  fi

  echo "== HTTP check: $BASE/api/characters/import-debug =="
  if IMPORT_JSON=$($CURL "$BASE/api/characters/import-debug" 2>/dev/null); then
    printf '%s' "$IMPORT_JSON" | python3 -m json.tool 2>/dev/null || printf '%s\n' "$IMPORT_JSON"
  else
    echo "(request failed)"
  fi

  echo "== HTTP check: $BASE/api/characters =="
  if CHAR_JSON=$($CURL "$BASE/api/characters" 2>/dev/null); then
    printf '%s' "$CHAR_JSON" | python3 -m json.tool 2>/dev/null || printf '%s\n' "$CHAR_JSON"
  else
    echo "(request failed)"
  fi
}

# Safe prompt helper: reads from tty, respects default, never exits on read failure
ask() {
  local _q="$1"; local _def="$2"; local _out=""; local _rc=0
  set +e
  read -rp "${_q}" _out </dev/tty
  _rc=$?
  set -e
  if [ $_rc -ne 0 ]; then _out=""; fi
  if [ -z "${_out}" ]; then printf '%s' "${_def}"; else printf '%s' "${_out}"; fi
}

# JSON helpers (stdin): return 0 on condition true
json_is_empty() {
python3 - <<'PY'
import sys, json
try:
    data = json.load(sys.stdin)
    sys.exit(0 if isinstance(data, list) and len(data) == 0 else 1)
except Exception:
    # Treat invalid/missing as empty so we trigger import fallback
    sys.exit(0)
PY
}

json_len_gt_zero() {
python3 - <<'PY'
import sys, json
try:
    data = json.load(sys.stdin)
    sys.exit(0 if isinstance(data, list) and len(data) > 0 else 1)
except Exception:
    sys.exit(1)
PY
}

ensure_server() {
  echo "Checking $BASE/health …" >&2
  if $CURL "$BASE/health" >/dev/null 2>&1; then echo "Server is up." >&2; return 0; fi
  echo "Starting server (background)…" >&2
  (
    nohup npm --prefix "$SERVER_DIR" run -s "$SERVER_RUN" >/dev/null 2>&1 &
  )
  STARTED_BY_CRPG=1
  for i in {1..60}; do
    sleep 0.5
    if $CURL "$BASE/health" >/dev/null 2>&1; then echo "Server ready." >&2; return 0; fi
    [ $((i % 10)) -eq 0 ] && echo " … waiting for server ($((i/2))s)" >&2 || true
  done
  echo "Server did not become ready at $BASE/health" >&2; exit 1
}

restart_server() {
  echo "Restarting server on port 4000 …" >&2
  ( cd "$SERVER_DIR" && bash scripts/kill-port.sh 4000 ) || true
  # Give OS a moment to release port
  sleep 0.5
  STARTED_BY_CRPG=1
}

list_chars() { $CURL "$BASE/api/characters" || echo '[]'; }

find_char_id() {
  local name="$1"; list_chars | python3 - "$name" << 'PY'
import sys,json
name=sys.argv[1].lower()
try: rows=json.load(sys.stdin)
except Exception: rows=[]
for r in rows:
  if isinstance(r.get('name'),str) and r['name'].lower()==name:
    print(r.get('id','')); break
PY
}

ensure_char() {
  local name="$1"; local cid=""; cid=$(find_char_id "$name")
  if [ -z "$cid" ]; then
    echo "Creating character $name" >&2
    local resp
    resp=$($CURL -X POST "$BASE/api/characters" -H 'Content-Type: application/json' -d '{"name":"'"$name"'","system_prompt":""}' || echo '{}')
    cid=$(printf '%s' "$resp" | json_get id || true)
    [ -z "$cid" ] && sleep 0.3 && cid=$(find_char_id "$name")
  fi
  printf '%s' "$cid"
}

usage() {
cat <<'USAGE'
crpg — start server if needed, choose story/characters, and chat.
Usage:
  crpg                              # interactive
  crpg <NPC>                        # NPC; player from config
  crpg <NPC> <Player>               # NPC + player (e.g., Ellis or char:Olive)
  crpg <NPC> <Player> @<Story>      # add story (or place @Story first)
Flags:
  --story "Name"   Explicit story name
  --no-server      Do not start/stop the local server (hit whatever BASE points to)
  --diagnose       Print config/import diagnostics and exit
Env:
  BASE=http://localhost:4000  PROVIDER, MODEL, PROVIDER_KEY, USE_RAG, USE_RESPONSES
USAGE
}

case "${1:-}" in -h|--help|help) usage; exit 0;; esac

ARGS=("$@")
STORY_NAME=""; CH_NAME=""; PLAYER_SPEC=""
FORCE_RESTART="unset"  # 'true'|'false'|'unset'
FORCE_SHUTDOWN="unset" # 'true'|'false'|'unset'

# Parse args: allow @Story anywhere and --story "Name"; first bare -> character; second bare -> player
i=0; while [ $i -lt ${#ARGS[@]} ]; do
  a="${ARGS[$i]}"; case "$a" in
    --story) i=$((i+1)); STORY_NAME="${ARGS[$i]:-}" ;;
    --story=*) STORY_NAME="${a#*=}" ;;
    --no-server) NO_SERVER=1 ;;
    --diagnose) DIAGNOSE=1 ;;
    --restart) FORCE_RESTART="true" ;;
    --no-restart|--norestart) FORCE_RESTART="false" ;;
    --shutdown-on-exit|--shutdown) FORCE_SHUTDOWN="true" ;;
    --keep-server|--keep) FORCE_SHUTDOWN="false" ;;
    @*) STORY_NAME="${a#@}" ;;
    *) if [ -z "$CH_NAME" ]; then CH_NAME="$a"; elif [ -z "$PLAYER_SPEC" ]; then PLAYER_SPEC="$a"; else :; fi ;;
  esac; i=$((i+1));
done

# Early exit for diagnostics
if [ "$DIAGNOSE" = "1" ]; then
  diagnose_local
  exit 0
fi

# Decide on restart behavior from config and flags
CFG_RESTART=$(python3 - << 'PY'
import json
try:
  cfg=json.load(open('server/config.json'))
  print('1' if (cfg.get('flags') or {}).get('autoRestartOnLaunch') else '0')
except Exception:
  print('0')
PY
)
CFG_SHUTDOWN=$(python3 - << 'PY'
import json
try:
  cfg=json.load(open('server/config.json'))
  print('1' if (cfg.get('flags') or {}).get('autoShutdownOnExit', True) else '0')
except Exception:
  print('1')
PY
)
if [ "$NO_SERVER" != "1" ]; then
  if [ "$FORCE_RESTART" = "true" ] || { [ "$FORCE_RESTART" = "unset" ] && [ "$CFG_RESTART" = "1" ]; }; then
    restart_server
  elif [ "$FORCE_RESTART" = "unset" ] && [ "$CFG_RESTART" = "0" ]; then
    # Ask interactively (tty)
    ANS=$(ask "Restart server now? (y/N): " "N")
    if [[ "$ANS" =~ ^[Yy]$ ]]; then restart_server; fi
  fi

  ensure_server
else
  echo "Skipping local server management (--no-server)." >&2
fi

# Characters import/diagnostics block
if [ -z "$CH_NAME" ]; then
  echo "Characters on server:" >&2
  CHARLIST=$(list_chars || echo '[]')
  STRIPPED=$(printf '%s' "$CHARLIST" | tr -d '\n\r\t ')
  if [ -z "$STRIPPED" ] || [ "$STRIPPED" = "[]" ]; then
    echo "No characters found. Importing from drop-in profiles (if any)…" >&2
    $CURL -X POST "$BASE/api/characters/import-from-profiles" >/dev/null 2>&1 || true
    sleep 0.4
    CHARLIST=$(list_chars || echo '[]')
    STRIPPED=$(printf '%s' "$CHARLIST" | tr -d '\n\r\t ')
    if [ -z "$STRIPPED" ] || [ "$STRIPPED" = "[]" ]; then
      echo "Still no characters after import." >&2
      DBG=$($CURL "$BASE/api/characters/import-debug" || echo '{}')
      echo "[debug] import-debug: $(printf '%s' "$DBG" | python3 -c 'import sys,json; d=json.loads(sys.stdin.read() or "{}"); print({k:d.get(k) for k in ["cwd","base","abs","exists"]})')" >&2
      echo "[debug] entries: $(printf '%s' "$DBG" | python3 -c 'import sys,json; d=json.loads(sys.stdin.read() or "{}"); e=d.get("entries") or []; print([x.get("entry") for x in e])')" >&2
      DBG2=$($CURL -X POST "$BASE/api/characters/import-now" || echo '{}')
      echo "[debug] import-now: $(printf '%s' "$DBG2" | python3 -c 'import sys,json; d=json.loads(sys.stdin.read() or "{}"); print({k:d.get(k) for k in ["base","abs","count"]})')" >&2
    fi
  fi
  printf '%s' "$CHARLIST" | python3 - << 'PY' || true
import sys,json
try: rows=json.load(sys.stdin)
except Exception: rows=[]
for i,r in enumerate(rows,1): print(f" {i:2d}. {r.get('name','?')}  {r.get('id','')[:8]}")
PY
  echo "(If none listed, enter a new name and it will be created.)" >&2
  CH_NAME=$(ask "Character to chat with: " "Olive")
fi


if [ -z "$CH_NAME" ]; then
  echo "Characters on server:" >&2
  CHARLIST=$(list_chars || echo '[]')
  # If empty, try importing from drop-in profiles
  # Treat unreadable/invalid JSON as empty to trigger import
  STRIPPED=$(printf '%s' "$CHARLIST" | tr -d '\n\r\t ')
  if [ -z "$STRIPPED" ] || [ "$STRIPPED" = "[]" ]; then
    echo "No characters found. Importing from drop-in profiles (if any)…" >&2
    IMP=$($CURL -X POST "$BASE/api/characters/import-from-profiles" 2>/dev/null || echo '')
    sleep 0.3
    CHARLIST=$(list_chars || echo '[]')
    STRIPPED=$(printf '%s' "$CHARLIST" | tr -d '\n\r\t ')
    if [ -z "$STRIPPED" ] || [ "$STRIPPED" = "[]" ]; then
      echo "Still no characters after import." >&2
      # Debug: query import path and entries
      DBG=$($CURL "$BASE/api/characters/import-debug" || echo '{}')
      echo "[debug] import-debug: $(printf '%s' "$DBG" | python3 -c 'import sys,json; d=json.loads(sys.stdin.read() or "{}"); print({k:d.get(k) for k in ["cwd","base","abs","exists"]})')" >&2
      echo "[debug] entries: $(printf '%s' "$DBG" | python3 -c 'import sys,json; d=json.loads(sys.stdin.read() or "{}"); e=d.get("entries") or []; print([x.get("entry") for x in e])')" >&2
      ANS=$(ask "Restart server now and retry import? (y/N): " "N")
      if [[ "$ANS" =~ ^[Yy]$ ]]; then
        restart_server
        ensure_server
        $CURL -X POST "$BASE/api/characters/import-from-profiles" >/dev/null 2>&1 || true
        CHARLIST=$(list_chars || echo '[]')
        STRIPPED=$(printf '%s' "$CHARLIST" | tr -d '\n\r\t ')
        # If still empty after restart, offer folder-name seeding
        if [ -z "$STRIPPED" ] || [ "$STRIPPED" = "[]" ]; then
          ANS2=$(ask "Create characters from drop-in folder names now? (y/N): " "N")
          if [[ "$ANS2" =~ ^[Yy]$ ]]; then
            DROP=$(python3 - << 'PY'
import json
try:
  cfg=json.load(open('server/config.json'))
  print((cfg.get('dirs') or {}).get('profilesDropin') or '')
except Exception:
  print('')
PY
)
            [ -z "$DROP" ] && DROP="../character_profiles"
            DROP_ABS=$(python3 - "$SERVER_DIR" "$DROP" << 'PY'
import os,sys
base=sys.argv[1]; rel=sys.argv[2]
print(os.path.abspath(rel if os.path.isabs(rel) else os.path.join(base, rel)))
PY
)
            if [ -d "$DROP_ABS" ]; then
              echo "Scanning $DROP_ABS …" >&2
              for d in "$DROP_ABS"/*; do
                [ -d "$d" ] || continue
                base=$(basename "$d")
                echo "$base" | grep -qE '__[0-9a-fA-F-]{36}$' && continue
                [ "$base" = "Default" ] && continue
                echo "Seeding character $base" >&2
                resp=$($CURL -X POST "$BASE/api/characters" -H 'Content-Type: application/json' -d '{"name":"'"$base"'","system_prompt":""}' || echo '{}')
                id=$(printf '%s' "$resp" | json_get id || true)
                if [ -n "$id" ] && [ -f "$d/profile.md" ]; then
                  curl -sS -X POST "$BASE/api/characters/$id/import-base" -F file=@"$d/profile.md" >/dev/null || true
                else
                  f=$(ls -1 "$d/long_char_profile"/*.md 2>/dev/null | head -n1 || true)
                  if [ -n "${f:-}" ]; then curl -sS -X POST "$BASE/api/characters/$id/import-base" -F file=@"$f" >/dev/null || true; fi
                fi
              done
              CHARLIST=$(list_chars || echo '[]')
            else
              echo "Drop-in path not found: $DROP_ABS" >&2
            fi
          fi
        fi
      else
        echo "Tip: cd server && npm run kill:4000; then run crpg again." >&2
        # Offer client-side bootstrap from drop-in folders
        ANS2=$(ask "Create characters from drop-in folder names now? (y/N): " "N")
        if [[ "$ANS2" =~ ^[Yy]$ ]]; then
          DROP=$(python3 - << 'PY'
import json,os
try:
  cfg=json.load(open('server/config.json'))
  p=(cfg.get('dirs') or {}).get('profilesDropin') or ''
except Exception:
  p=''
print(p)
PY
)
          # Resolve path relative to repo root
          [ -z "$DROP" ] && DROP="../character_profiles"
          # Resolve drop-in absolute path relative to server directory (config paths are server-relative)
          DROP_ABS=$(python3 - "$SERVER_DIR" "$DROP" << 'PY'
import os,sys
base=sys.argv[1]; rel=sys.argv[2]
p = rel if os.path.isabs(rel) else os.path.join(base, rel)
print(os.path.abspath(p))
PY
)
          if [ -d "$DROP_ABS" ]; then
            echo "Scanning $DROP_ABS …" >&2
            for d in "$DROP_ABS"/*; do
              [ -d "$d" ] || continue
              base=$(basename "$d")
              # Skip runtime bundle directories name__uuid
              if echo "$base" | grep -qE '__[0-9a-fA-F-]{36}$'; then continue; fi
              # Skip Default
              if [ "$base" = "Default" ]; then continue; fi
              echo "Seeding character $base" >&2
              resp=$($CURL -X POST "$BASE/api/characters" -H 'Content-Type: application/json' -d '{"name":"'"$base"'","system_prompt":""}' || echo '{}')
              id=$(printf '%s' "$resp" | json_get id || true)
              # If profile.md exists, import it
              if [ -n "$id" ] && [ -f "$d/profile.md" ]; then
                curl -sS -X POST "$BASE/api/characters/$id/import-base" -F file=@"$d/profile.md" >/dev/null || true
              fi
            done
            CHARLIST=$(list_chars || echo '[]')
          else
            echo "Drop-in path not found: $DROP_ABS" >&2
          fi
        fi
      fi
  fi
  fi
  printf '%s' "$CHARLIST" | python3 - << 'PY' || true
import sys,json
try: rows=json.load(sys.stdin)
except Exception: rows=[]
for i,r in enumerate(rows,1): print(f" {i:2d}. {r.get('name','?')}  {r.get('id','')[:8]}")
PY
  echo "(If none listed, enter a new name and it will be created.)" >&2
  CH_NAME=$(ask "Character to chat with: " "Olive")
fi

# Determine story
STORY_MODE="new"
if [ -z "$STORY_NAME" ]; then
  # Offer existing stories; else default story1
STORIES=$($CURL "$BASE/api/stories" || echo '[]')
  HAS=$(printf '%s' "$STORIES" | python3 -c 'import sys,json; print(1 if json.loads(sys.stdin.read() or "[]") else 0)' || echo 0)
  if [ "$HAS" = "1" ]; then
    echo "Existing stories:" >&2
    printf '%s' "$STORIES" | python3 - << 'PY'
import sys,json
rows=json.loads(sys.stdin.read() or '[]')
for i,r in enumerate(rows,1): print(f" {i:2d}. {r.get('name','?')}  {r.get('id','')[:8]}  ({len(r.get('sessions',[]))} sessions)")
PY
    ANS=$(ask "Continue existing story? (y/N): " "N"); ANS=${ANS:-N}
    if [[ "$ANS" =~ ^[Yy]$ ]]; then
      SEL=$(ask "Select by number or type name: " "")
      if [[ "$SEL" =~ ^[0-9]+$ ]]; then
        STORY_NAME=$(printf '%s' "$STORIES" | python3 - "$SEL" << 'PY'
import sys,json
idx=int(sys.argv[1]); rows=json.loads(sys.stdin.read() or '[]')
print(rows[idx-1]['name'] if 1<=idx<=len(rows) else '')
PY
)
      else STORY_NAME="$SEL"; fi
      STORY_MODE="continue"
    else
      STORY_NAME=$(ask "New story name [story1]: " "story1")
      STORY_MODE="new"
    fi
  else STORY_NAME="story1"; STORY_MODE="new"; fi
fi

# Player default
if [ -z "$PLAYER_SPEC" ]; then
  PLAYER_SPEC=$(python3 - << 'PY'
import json
try:
  cfg=json.load(open('server/config.json'))
  print((cfg.get('user') or {}).get('defaultPlayer') or '')
except Exception:
  print('')
PY
)
  PLAYER_SPEC=$(ask "Your character (name or char:Name) [${PLAYER_SPEC:-Ellis}]: " "${PLAYER_SPEC:-Ellis}")
  PLAYER_SPEC=${PLAYER_SPEC:-${PLAYER_SPEC:-Ellis}}
fi

# Ensure main character exists
CID=$(ensure_char "$CH_NAME")
[ -z "$CID" ] && echo "Failed to ensure $CH_NAME" >&2 && exit 1

# Multi-select additional participants
PARTICIPANTS=$(list_chars)
COUNT=$(printf '%s' "$PARTICIPANTS" | python3 -c 'import sys,json; print(len(json.load(sys.stdin) or []))' || echo 0)
EXTRA_JSON="[]"
if [ "$COUNT" -gt 1 ]; then
  echo "Select additional participants (comma numbers, blank=none):" >&2
  printf '%s' "$PARTICIPANTS" | python3 - << 'PY'
import sys,json
rows=json.load(sys.stdin)
for i,r in enumerate(rows,1): print(f" {i:2d}. {r['name']}  {r['id'][:8]}")
PY
  SELS=$(ask "Add #s: " "") || true
  if [ -n "${SELS:-}" ]; then
    EXTRA_JSON=$(printf '%s' "$PARTICIPANTS" | python3 - "$SELS" "$CID" << 'PY'
import sys,json
rows=json.load(sys.stdin)
sel=sys.argv[1].replace(',', ' ').split()
main=sys.argv[2]
out=[]
for s in sel:
  try:
    i=int(s)-1
    if 0<=i<len(rows):
      r=rows[i]
      if r.get('id')!=main:
        out.append({'id': r['id'], 'name': r['name']})
  except: pass
print(json.dumps(out))
PY
)
  fi
fi

PARTICIPANTS_JSON=$(python3 - "$CID" "$CH_NAME" "$EXTRA_JSON" << 'PY'
import sys,json
cid=sys.argv[1]; name=sys.argv[2]; extra=json.loads(sys.argv[3])
base=[{"id": cid, "name": name}]
seen={cid}
for e in extra:
  if e.get('id') not in seen:
    base.append(e); seen.add(e['id'])
print(json.dumps(base))
PY
)

echo "Starting session — story=$STORY_NAME ($STORY_MODE); with $CH_NAME; you=$PLAYER_SPEC" >&2
RESP=$($CURL -X POST "$BASE/api/sessions" -H 'Content-Type: application/json' \
  -d '{"title":"Chat","participants":'"$PARTICIPANTS_JSON"',"story":"'"$STORY_NAME"'","story_mode":"'"$STORY_MODE"'","player":"'"$PLAYER_SPEC"'"}')
if echo "$RESP" | grep -q 'confirm_new_character'; then
  NAME=$(printf '%s' "$RESP" | json_get name)
  echo "Character '$NAME' does not exist. Create it now? (Y/n)" >&2
  ANS=$(ask "Create now? (Y/n): " "Y"); ANS=${ANS:-Y}
  if [[ "$ANS" =~ ^[Yy]$ ]]; then
    RESP=$($CURL -X POST "$BASE/api/sessions" -H 'Content-Type: application/json' \
      -d '{"title":"Chat","participants":'"$PARTICIPANTS_JSON"',"story":"'"$STORY_NAME"'","story_mode":"'"$STORY_MODE"'","player":"'"$PLAYER_SPEC"'","confirm_create_player":true}')
  else
    echo "Aborted." >&2; exit 1
  fi
fi
SID=$(printf '%s' "$RESP" | json_get id || true)
[ -z "$SID" ] && echo "Failed to start session: $RESP" >&2 && exit 1

# Provider/model defaults
PROVIDER="${PROVIDER:-openai}"; MODEL="${MODEL:-gpt-5-mini}"
REVIEWER_PROVIDER="${REVIEWER_PROVIDER:-openai}"; REVIEWER_MODEL="${REVIEWER_MODEL:-gpt-5-mini}"; STYLE_SHORT="${STYLE_SHORT:-true}"
USE_RAG="${USE_RAG:-true}"; USE_RESPONSES="${USE_RESPONSES:-false}"
URL_TURN="$BASE/api/convo/turn"; [ "${DEBUG_ECHO:-0}" = 1 ] && URL_TURN+="?debug=1"

echo "Type messages. /exit to quit." >&2
while IFS= read -rp "> " MSG </dev/tty; do
  [ "$MSG" = "/exit" ] && break
  [ -z "$MSG" ] && continue
  if [ -n "${PROVIDER_KEY:-}" ]; then EXTRA_HEADER=( -H "X-Provider-Key: $PROVIDER_KEY" ); else EXTRA_HEADER=(); fi
  RES=$(curl -sS --max-time 20 --connect-timeout 2 "${EXTRA_HEADER[@]}" -H 'Content-Type: application/json' -X POST "$URL_TURN" -d @- <<JSON
{
  "session_id": "$SID",
  "player_text": $(printf %s "$MSG" | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))'),
  "characters": $(printf '%s' "$PARTICIPANTS_JSON"),
  "provider": "$PROVIDER",
  "model": "$MODEL",
  "useRag": ${USE_RAG},
  "use_responses": ${USE_RESPONSES},
  "reviewer_provider": "$REVIEWER_PROVIDER",
  "reviewer_model": "$REVIEWER_MODEL",
  "style_short": ${STYLE_SHORT}
}
JSON
)
  python3 - << 'PY'
import sys,json
raw=sys.stdin.read()
try:
  data=json.loads(raw)
  for t in data.get('turns',[]):
    print(f"{t.get('speaker','')}: {t.get('text','')}")
except Exception:
  if raw.strip(): print(raw)
PY
done

# Shutdown on exit if we started the server and policy allows
DO_SHUTDOWN="0"
if [ "$FORCE_SHUTDOWN" = "true" ]; then DO_SHUTDOWN="1"; fi
if [ "$FORCE_SHUTDOWN" = "unset" ] && [ "$CFG_SHUTDOWN" = "1" ]; then DO_SHUTDOWN="1"; fi
if [ "$STARTED_BY_CRPG" = "1" ] && [ "$DO_SHUTDOWN" = "1" ]; then
  echo "Shutting down server (port 4000) …" >&2
  ( cd "$SERVER_DIR" && bash scripts/kill-port.sh 4000 ) || true
fi
