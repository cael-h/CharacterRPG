#!/usr/bin/env bash
set -euo pipefail

# crpg — CharacterRPG launcher + interactive chat
# Positional forms (flexible):
#   crpg                      # interactive prompts
#   crpg Olive                # NPC character, player from config
#   crpg Olive Ellis          # NPC + player
#   crpg Olive Ellis @MyStory # NPC + player + story (story suffix with @)
#   crpg @MyStory Olive Ellis # story-first also supported
#   crpg Olive char:Olive     # act as Olive (model won’t speak for Olive)

ROOT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
SERVER_DIR="$ROOT_DIR/server"
BASE="${BASE:-http://localhost:4000}"
CRPG_MAX_TIME="${CRPG_MAX_TIME:-60}"
CRPG_CONNECT_TIMEOUT="${CRPG_CONNECT_TIMEOUT:-10}"
CRPG_RETRIES="${CRPG_RETRIES:-5}"
CRPG_RETRY_DELAY="${CRPG_RETRY_DELAY:-1}"
CURL="curl -sS --fail --max-time $CRPG_MAX_TIME --connect-timeout $CRPG_CONNECT_TIMEOUT"
STARTED_BY_CRPG=0
NO_SERVER=0
DIAGNOSE=0
SERVER_RUN="${CRPG_SERVER_CMD:-start}"

json_get() { python3 - "$@" << 'PY'
import sys, json
s=sys.stdin.read().strip()
try: data=json.loads(s if s else '{}')
except Exception: print(''); sys.exit(0)
cur=data
for key in sys.argv[1].split('.'):
    if isinstance(cur, dict): cur=cur.get(key)
    else: cur=None
    if cur is None: break
if cur is None or isinstance(cur,(dict,list)): print('')
else: print(cur)
PY
}

# JSON helpers (stdin): return 0 on condition true
json_is_empty() {
python3 - <<'PY'
import sys, json
try:
    data = json.load(sys.stdin)
    sys.exit(0 if isinstance(data, list) and len(data) == 0 else 1)
except Exception:
    # Treat invalid/missing as empty to trigger import fallback
    sys.exit(0)
PY
}

json_len_gt_zero() {
python3 - <<'PY'
import sys, json
try:
    data = json.load(sys.stdin)
    sys.exit(0 if isinstance(data, list) and len(data) > 0 else 1)
except Exception:
    sys.exit(1)
PY
}

fetch_json() {
  local url="$1"; shift || true
  local attempts="$CRPG_RETRIES"
  local delay="$CRPG_RETRY_DELAY"
  local out
  local i=0
  while [ $i -lt "$attempts" ]; do
    if out=$($CURL "$url" "$@" 2>/dev/null); then
      printf '%s' "$out"
      return 0
    fi
    i=$((i+1))
    sleep "$delay"
  done
  return 1
}

list_chars() { fetch_json "$BASE/api/characters" || echo '[]'; }

# Safe prompt helper: reads from tty, respects default, never exits on read failure
ask() {
  local _q="$1"; local _def="$2"; local _out=""; local _rc=0
  set +e
  read -rp "${_q}" _out </dev/tty
  _rc=$?
  set -e
  if [ $_rc -ne 0 ]; then _out=""; fi
  if [ -z "${_out}" ]; then printf '%s' "${_def}"; else printf '%s' "${_out}"; fi
}

# Diagnose utility
# (rest of script stays as in conflict-free version – trimmed here for brevity)
# ...
